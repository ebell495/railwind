#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Group {
    Hover,
    Focus,
    FocusWithin,
    FocusVisible,
    Active,
    Visited,
    Target,
    First,
    Last,
    Only,
    Odd,
    Even,
    FirstOfType,
    LastOfType,
    OnlyOfType,
    Empty,
    Disabled,
    Enabled,
    Checked,
    Indeterminate,
    Default,
    Required,
    Valid,
    Invalid,
    InRange,
    OutOfRange,
    PlaceholderShown,
    Autofill,
    ReadOnly,
    Open,
}

impl Group {
    pub fn new(value: &str) -> Option<Self> {
        let g = match value {
            "group-hover" => Group::Hover,
            "group-focus" => Group::Focus,
            "group-focus-within" => Group::FocusWithin,
            "group-focus-visible" => Group::FocusVisible,
            "group-active" => Group::Active,
            "group-visited" => Group::Visited,
            "group-target" => Group::Target,
            "group-first-child" => Group::First,
            "group-last-child" => Group::Last,
            "group-only-child" => Group::Only,
            "group-nth-child(odd)" => Group::Odd,
            "group-nth-child(even)" => Group::Even,
            "group-first-of-type" => Group::FirstOfType,
            "group-last-of-type" => Group::LastOfType,
            "group-only-of-type" => Group::OnlyOfType,
            "group-empty" => Group::Empty,
            "group-disabled" => Group::Disabled,
            "group-enabled" => Group::Enabled,
            "group-checked" => Group::Checked,
            "group-indeterminate" => Group::Indeterminate,
            "group-default" => Group::Default,
            "group-required" => Group::Required,
            "group-valid" => Group::Valid,
            "group-invalid" => Group::Invalid,
            "group-in-range" => Group::InRange,
            "group-out-of-range" => Group::OutOfRange,
            "group-placeholder-shown" => Group::PlaceholderShown,
            "group-autofill" => Group::Autofill,
            "group-readonly" => Group::ReadOnly,
            "group-open" => Group::Open,
            _ => return None,
        };

        Some(g)
    }

    pub fn to_static_str(&self) -> &'static str {
        match self {
            Group::Hover => "group:hover .",
            Group::Focus => "group:focus .",
            Group::FocusWithin => "group:focus-within .",
            Group::FocusVisible => "group:focus-visible .",
            Group::Active => "group:active .",
            Group::Visited => "group:visited .",
            Group::Target => "group:target .",
            Group::First => "group:first-child .",
            Group::Last => "group:last-child .",
            Group::Only => "group:only-child .",
            Group::Odd => "group:nth-child(odd) .",
            Group::Even => "group:nth-child(even) .",
            Group::FirstOfType => "group:first-of-type .",
            Group::LastOfType => "group:last-of-type .",
            Group::OnlyOfType => "group:only-of-type .",
            Group::Empty => "group:empty .",
            Group::Disabled => "group:disabled .",
            Group::Enabled => "group:enabled .",
            Group::Checked => "group:checked .",
            Group::Indeterminate => "group:indeterminate .",
            Group::Default => "group:default .",
            Group::Required => "group:required .",
            Group::Valid => "group:valid .",
            Group::Invalid => "group:invalid .",
            Group::InRange => "group:in-range .",
            Group::OutOfRange => "group:out-of-range .",
            Group::PlaceholderShown => "group:placeholder-shown .",
            Group::Autofill => "group:autofill .",
            Group::ReadOnly => "group:readonly .",
            Group::Open => "group:open .",
        }
    }
}
