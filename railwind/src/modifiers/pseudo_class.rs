#[derive(Debug, PartialEq, Eq, Clone)]
pub enum PseudoClass {
    Hover,
    Focus,
    FocusWithin,
    FocusVisible,
    Active,
    Visited,
    Target,
    First,
    Last,
    Only,
    Odd,
    Even,
    FirstOfType,
    LastOfType,
    OnlyOfType,
    Empty,
    Disabled,
    Enabled,
    Checked,
    Indeterminate,
    Default,
    Required,
    Valid,
    Invalid,
    InRange,
    OutOfRange,
    PlaceholderShown,
    Autofill,
    ReadOnly,
    Open,
}

impl PseudoClass {
    pub fn new(value: &str) -> Option<Self> {
        let pc = match value {
            "hover" => PseudoClass::Hover,
            "focus" => PseudoClass::Focus,
            "focus-within" => PseudoClass::FocusWithin,
            "focus-visible" => PseudoClass::FocusVisible,
            "active" => PseudoClass::Active,
            "visited" => PseudoClass::Visited,
            "target" => PseudoClass::Target,
            "first" => PseudoClass::First,
            "last" => PseudoClass::Last,
            "only" => PseudoClass::Only,
            "odd" => PseudoClass::Odd,
            "even" => PseudoClass::Even,
            "first-of-type" => PseudoClass::FirstOfType,
            "last-of-type" => PseudoClass::LastOfType,
            "only-of-type" => PseudoClass::OnlyOfType,
            "empty" => PseudoClass::Empty,
            "disabled" => PseudoClass::Disabled,
            "enabled" => PseudoClass::Enabled,
            "checked" => PseudoClass::Checked,
            "indeterminate" => PseudoClass::Indeterminate,
            "default" => PseudoClass::Default,
            "required" => PseudoClass::Required,
            "valid" => PseudoClass::Valid,
            "invalid" => PseudoClass::Invalid,
            "in-range" => PseudoClass::InRange,
            "out-of-range" => PseudoClass::OutOfRange,
            "placeholder-shown" => PseudoClass::PlaceholderShown,
            "autofill" => PseudoClass::Autofill,
            "readonly" => PseudoClass::ReadOnly,
            "open" => PseudoClass::Open,
            _ => return None,
        };

        Some(pc)
    }

    pub fn to_static_str(self) -> &'static str {
        match self {
            PseudoClass::Hover => "hover",
            PseudoClass::Focus => "focus",
            PseudoClass::FocusWithin => "focus-within",
            PseudoClass::FocusVisible => "focus-visible",
            PseudoClass::Active => "active",
            PseudoClass::Visited => "visited",
            PseudoClass::Target => "target",
            PseudoClass::First => "first-child",
            PseudoClass::Last => "last-child",
            PseudoClass::Only => "only-child",
            PseudoClass::Odd => "nth-child(odd)",
            PseudoClass::Even => "nth-child(even)",
            PseudoClass::FirstOfType => "first-of-type",
            PseudoClass::LastOfType => "last-of-type",
            PseudoClass::OnlyOfType => "only-of-type",
            PseudoClass::Empty => "empty",
            PseudoClass::Disabled => "disabled",
            PseudoClass::Enabled => "enabled",
            PseudoClass::Checked => "checked",
            PseudoClass::Indeterminate => "indeterminate",
            PseudoClass::Default => "default",
            PseudoClass::Required => "required",
            PseudoClass::Valid => "valid",
            PseudoClass::Invalid => "invalid",
            PseudoClass::InRange => "in-range",
            PseudoClass::OutOfRange => "out-of-range",
            PseudoClass::PlaceholderShown => "placeholder-shown",
            PseudoClass::Autofill => "autofill",
            PseudoClass::ReadOnly => "readonly",
            PseudoClass::Open => "open",
        }
    }
}
